---
title: "Exercise 03"
author: "Chen Chen (Cysteine-18)"
date: today
format:
  html:
    toc: true
    self-contained: true
    highlight-style: github
    code-line-numbers: true
editor_options:
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load packages
Here, we use packages `ggplot2`, `reshape2` and `pheatmap`.
```{r}
library(ggplot2)
library(reshape2)
library(pheatmap)

```

## Exploratory Data Analysis

Do an exploratory data analysis of a matrix of expression values. The data consists of expression values for samples that were treated with DMSO and TSA. The samples were measured using three technologies: bulk, IFC96, IFC800. See the two RDS files `counts.RDS` and `phenodata.RDS`.

The experiment has two experimental factors "Treatment" and "Technology". Treatment has two levels, Technology has three levels. Samples that have the same combination of Treatment & Technology are replicates.

## Data Import

```{r }
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)

```

## Compute and visualize basic statistics on the experimental design

How many replicates are there for each combination of factor levels? How many genes have an expression value above 0 in each sample? Are there systematic differences between the samples in the different conditions (treatment & technology). Visualize the following statistics per sample:

number of detected genes

total sum of counts per sample (serves as a proxy for the number of sequenced reads per sample)

Color the samples by the experimental condition.

1. We first calculate the replicates number for each combination of factor levels(Treatment: DMSO, TSA; Technology: bulk, IFC96, IFC800), and get the table below:

```{r}
combmatrix <- matrix(0, nrow = 2, ncol = 3)
rownames(combmatrix) <- c('DMSO', 'TSA')
colnames(combmatrix) <- c('bulk', 'IFC96', 'IFC800')

for (i in 1:nrow(anno)){
  combmatrix[anno$Treatment[i], anno$Technology[i]] <- combmatrix[anno$Treatment[i], anno$Technology[i]]+1
}

combmatrix
```

2. We visualize the number of detected genes per sample using a violin plot:

```{r}
num_gene <- data.frame(colSums(x != 0))
colnames(num_gene) <- c('num_gene')
head(num_gene)

anno$Technology_Treatment <- paste(anno$Technology, anno$Treatment, sep = '-')

ggplot(cbind(anno, num_gene), 
       aes(x = Technology_Treatment, y = num_gene, fill = Technology_Treatment))+
  geom_violin(trim = FALSE)+
  ggtitle('Violin Plot of Number of Detected Genes per Sample')
```

3. We visualize the total sum of counts per sample using a violin plot:

```{r}
total_count <- data.frame(colSums(x))
colnames(total_count) <- c('total_count')
head(total_count)

ggplot(cbind(anno, total_count), 
       aes(x = Technology_Treatment, y = total_count, fill = Technology_Treatment))+
  geom_violin(trim = FALSE)+
  ggtitle('Violin Plot of Total Sum of Counts per Sample')
  
```

From the two plots above, we would say there is systematic differences between the samples in the different conditions (treatment & technology). It is especially obvious using different technology, bulk shows a different schema with IFC96 and IFC800 regards to the two statistics (1. number of detected genes, 2. total sum of counts per sample).

## Normalize the data

Scale the columns so that the total sum of all columns are identical

We then normalize the data.

```{r}
normal_x <- sweep(x*max(total_count), 2, t(total_count), FUN = '/') 
```

## Transform the data to log-scale

Use the function `log1p` to transform the data to log-scale

We use the function `log1p` to transform the data.

```{r}
log_normal_x <- log1p(normal_x)
```

## Visualize the distribution of the expression values

Use violin plots and boxplots to visualize the distribution of the expression values. 
Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample. Color by experimental factors.

1. We first aggregate the data by Technology and Treatment thus making replicates in the same experimental group into one average sample. We reshape the data to make it suitable for plotting.

```{r}
t_log_normal_x <- data.frame(t(log_normal_x))
data_combined <- cbind(anno, t_log_normal_x)
data_aggregated <- aggregate(. ~ Treatment + Technology + Technology_Treatment, data = data_combined, FUN = mean)
data_aggregated <- data_aggregated[, -(1:2)]
gene_expression_cols <- data_aggregated[, -(1:3)]
melted_data <- melt(data_aggregated, id.vars = c("Technology_Treatment"), variable.name = "Gene", value.name = "Expression")

```

2. We use violin plots and boxplots to visualize the distribution of the expression values of average samples under different conditions.
```{r}
ggplot(melted_data, aes(x = Technology_Treatment, y = Expression, fill = Technology_Treatment))+
  geom_violin()+
  ggtitle('Violin Plot of Distribution of Expression Values under Differents Conditions')
  
ggplot(melted_data, aes(x = Technology_Treatment, y = Expression, fill = Technology_Treatment))+
  geom_boxplot()+
  ggtitle('Boxplot of Distribution of Expression Values under Differents Conditions')
  
```

## Most variable genes

Identify the 500 most variable genes (with largest variance across samples) and continue working with those

We identify the 500 most variable genes and create data_top_500 with these genes.
```{r}
gene_var <- data.frame(gene = colnames(data_combined)[4:ncol(data_combined)], 
                       var = apply(data_combined[, 4:ncol(data_combined)], 2, var))
top_500 <- gene_var[order(gene_var$var, decreasing = TRUE), ][1:500, ]
top_500_gene <- top_500$gene
data_top_500 <- data_combined[, c('Technology_Treatment', top_500_gene)]
```

## Sample correlations

Compute and visualize the sample-to-sample correlations

We compute the pearson correlation between samples and visualize sample-to-sample correlations using heatmap.

```{r}
gene_top_500 <- t(data_top_500[, -1])
sa2sa_cor <- cor(gene_top_500, method = 'pearson')
heatmap(sa2sa_cor, cexRow = .1, cexCol = .1)
```

## Clustering

Compute and visualize a hierarchical clustering of the samples, use the method `hclust`

We use `hclust` to compute and visualize a hierarchical clustering of the samples.

```{r}
clustering <- hclust(as.dist(1 - sa2sa_cor), method = 'complete')
plot(clustering, main = 'Hierarchical Clustering of Samples', cex = 0.3)
```
## Heatmap

Use the package `pheatmap` to generate a heatmap of the expression data.

We use package `pheatmap` to generate a heatmap of the expression data.

```{r}
pheatmap(gene_top_500, cluster_cols = TRUE, cluster_rows = TRUE, 
         fontsize = 6, show_rownames = FALSE,
         main = 'Expression Heatmap')
```

